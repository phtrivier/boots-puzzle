@node Introduction, Adventures, Top, Top
@chapter Introduction
@comment  node-name,  next,  previous,  up

This is the manual for the Boots Puzzle Language, a short ruby-based DSL
to make reflection games.

@menu
* Who's this for ?::
* Running Boots Puzzle::
@end menu

@node Who's this for ?, Running Boots Puzzle, Introduction, Introduction
@comment  node-name,  next,  previous,  up
@section Who's this for ?

This is a manual for people who want to create adventures playable
with the @command{boots-puzzle} 'Engine'.  If you want to play a game
based on Boots Puzzle (there should be some one day ;) ), please refer
to the manual of the game itself.

I will assume you are running a variant of GNU/Linux. If you try this
on an Apple(tm) computer or on a PC with Microsoft(tm) Windows, well,
I cannot blame you, but I don't guarantee anything.

This reminds me that I can't guarantee a lot for you if you run
GNU/Linux ; I've only tried this on my x486 compatible running Ubuntu
Hardy Heron.

I will assume that you have some knowledge of the
@url{http://ruby-lang.org, Ruby programming language}.  In my humble
opinion, you should.

Ruby rocks. Go learn it.

No, wait ; actually, don't go learn it, and let me show you how YOU
can extend my app and create your own puzzle, writting ruby code
without even realizing it.

There is plenty of documentation available for ruby on the Internet,
otherwise. You might want to start with @cite{Why's (Poignant) Guide
to Ruby}, which you can freely grab
@url{http://poignantguide.net/ruby/, here}.  This is a very funny
book, whith lots of drawings and jokes.

Being a terrible drawer, the author of this manual will try to provide
you with your fair share of jokes.

Have fun.

@node Running Boots Puzzle,  , Who's this for ?, Introduction
@section Running Boots Puzzle

You'll need the latest sources of the @command{boots-puzzle} project.
You should be able to get it from
@url{git://github.com/phtrivier/boots-puzzle.git}.  You will need to
install the @command{git} program first --- see
@url{http://git.or.cz/, Git home page}.

Once you have grabbed the sources, there should be a folder with the following structure :

@itemize
@item
Rakefile
@item
src
@itemize @minus
@item
adventures
@itemize @minus
@item
foobar
@end itemize
@item
editor
@item
gui
@item
plugins
@item
test
@end itemize
@end itemize

In particular, there should be an example of an adventure in the
@file{src/adventures/foobar} folder.

To run an adventure, you will need some extra ruby packages, including :

@itemize
@item
@command{rake}, a ruby version of @command{make}, used to run other tasks
@item
@command{mocha}, a ruby Mocking framwork, used in tests cases
@end itemize

How you install those packages is a bit system-dependant, sorry. You
should consult the INSTALL file that will give some detail, and
hopefully help you. Otherwise drop a note !

Still there ? Whao, you're not afraid by my lists. Okay, so adventures
should be in folders under the @file{src/adventures} folder. For
example, 'foobar' is the name of an adventure, so the adventure (that
is, all file necessary to describe the adventure) should be in
@file{src/adventures/foobar}.

To run the adventure, go to the folder just above the @file{src}
folder (you should see file @file{Rakefile}). Rake task @command{play}
is used to play and adventure. To play adventure foobar, type :

@example
rake play adventure=foobar
@end example

Later, we will create and adventure called 'donjon'. To play it, you will type :

@example
rake play adventure=donjon
@end example

If you forget the adventure name, you will automatically play
adventure foobar.

You'll see in a moment that an adventure is made of levels. If you
know the name of a level in an adventure, you can go directly to this
level. For example, to go directly to level called 'level_2' in
adventure foobar :

@example
rake play adventure=foobar level=level_2
@end example

You can get more information about how to invoke @command{rake play}
by calling @command{rake help}.

