* Game Engine
** TODO [#A] Conventions over Repetition
*** DONE Let a puzzle 'guess' its name based on the file name
*** DONE [#A] Let level 'guess' the name of a puzzle class from its file name
*** DONE Handle the case where the file ends with 'rb' ;)
*** TODO [#B] Move 'story' out of puzzle and let the level loads the story
*** TODO [#B] Let level 'guess' the name of the story based on the file name / class name
** DONE [#C] Find a way to have to write less stuff to define a story module (only the name of the puzzle, and the content of the init method...)

Story.for("level_1_puzzle") do
  tunnel :black, :white
end

-> C'est bien ca : ne jamais avoir a taper le nom d'une classe : uniquement le
nom d'un puzzle (et ca cree les classes en fonction !!)
voire :
Story.for(Level1Puzzle) do
  tunnel :black, :white
end
** TODO Make it possible to declare a story event without a class name (and use the one in the puzzle name in that case)
** DONE Make it easier to declare Cell
class WaterCell < Walkable
   walkable
   def src
     "plugins/water/water_cell.png"
   end
end

[water_cell.rb]
Cell.define("water") do
  walkable
  img "water_cell.png" # Possible parceque j'ai le nom du plugin !
end

[sea_cell.rb ou sea.rb]
Cell.define("sea", :name => "DefinedNamedCell", :parent => Walkable) do
  walkable
  img "sea_cell.png" => Definit la methode "src" qui va bien ("et est capable de virer le plugins/... au besoin ?)
end

Note that this might be possible since THIS works :

end

t = TotoFoo.new

So get inspiration from this ...

AND FROM THIS :
class Bar

  def self.bar(i)
    self.instance_eval do
      define_method :baz do
        puts "BAAAAZ #{i}"
      end
    end
  end

  def self.for(name, &block)
    new_klass = Bar.clone
    block.call(new_klass)
    new_klass_name = name[0,1].upcase + name[1..-1] + "Bar"
    Kernel.const_set(new_klass_name, new_klass)
  end

  def self.fur(name, &block)
    new_klass = Bar.clone
    new_klass.instance_eval(&block)
    new_klass_name = name[0,1].upcase + name[1..-1] + "Bar"
    Kernel.const_set(new_klass_name, new_klass)
  end


end

Bar.for("titi") do |b|
  b.bar 3
end

Bar.fur("tutu") do
  bar 4
end


b = TitiBar.new
b.baz => 3

c = TutuBar.new
c.baz => 4
** TODO [#B] Make it easier to declare CellTools (when there is only a cell type to pass ... don't have them write anything else!)
CellTool.for("water") > Definit un simple outil pour la classe WaterCell
CellTool.for(WaterCell) > Definit un outil pour la classe WaterCell (autre syntaxe)
?
CellTool.for("water") do |editor, i,j|
  # Behavior of the 'act' method AFTER CHANGING THE CELL !!
end

Note : CellTool.for ENREGISTRE LA CELLULE !!

Et toujours en dernier recours ...
def WaterCellTool < CellTool
 def initialize
  ...
 end
end
ToolsRegistry.register(CellTool ...)
** TODO [#C] Improve story system to add a flag telling if the event has already occured
** TODO Add the concept of a notification (so that the GUI can display stuff...)
** TODO [#D] Add quotes associated to a level (displayed between levels)
** TODO [#E] Introduce the notion of 'initializer'
*** TODO method 'def_identifier(:named_cells) ==> definit une method named_cells qui :
*** prend un block, et rajoute une methode 'init_named_cells' qui appelle ce block
*** reference l'initializer dans la classe (ajoute une liste Ã  la classe, ie une variable globale sur la classe elle meme, avec un set_instance_variable, au besoin ... )
*** Note : ca a l'air vraiment trop dur, et pas forcement indispensable ; pour l'instant
*** je laisse les initializeur ecrits "a la pogne" (ca va finir en gros eval, non?), et je ne fais
*** que referencer la liste des methodes d'init a appeller ...
*** DONE dans le constructeur, appeller tous les initializer dans l'ordre
*** DONE transformer la creation des named_cells en initialiseur
*** DONE transformer le placement des boots en initialiseur
*** DONE changer la syntaxe des rows et transformer la creation des cases en un initializeur
*** DONE changer la sauvegarde des rows (pour faire apparaitre rows do ...)
* Game UI
** Add a background around the UI
** Make the UI exstensible (addition to the plug-in system)
* Puzzle Editor
** TODO [BUG] It is not possible to load a level with a story (normal ...)
So either I monkey patch thing so that Story does not do anything in the context of the Editor (why not ??)
Or I am much cleverer ... and I get rid of the story once and for all (I let the level load the story if it need to,
gessing the name of the story, if required. So fix the level thing, and be done with it !!
** TODO [#A] Adventure system
*** TODO Load an adventure file
**** Adventure editing
***** TODO Create an adventure : ask puzzle dimensions, name, file_name
***** TODO Add / Remove levels (ask Puzzle and story file / name ?)
***** TODO Add / remove required plugins
***** TODO Indicate the location of plugins ? (using adventures / plugins by default ...)
**** Level editing
***** TODO link a level to a story and a puzzle
***** TODO edit the puzzle
*** TODO [#A] Load the tools from all plugins in an adventure
** TODO [#C] Undo ?
** TODO [#C] Continuous saving
*** Save puzzle in a temp file every 10 secs ; when you save it, simply rename the draft to the final file
** TODO Externalize strings (good exercise :))
** TODO Add a tool to set the quote for a puzzle
* Plugins
** TODO swimming : water cells, palms
*** TODO Palms
*** TODO Define cells as 'swimmable' (and let the player walk on it only if it wears waterproof boots)
** TODO burning
   (Same as swimming, but with waterproof)
** TODO chess moves
** TODO wall breaker
** TODO purely decorative plugin (with funny kinds of walls, etc...)
** TODO tunnel plugin (move from a place to another)
*** TODO Rename TunnelExtremityCell to TunnelCell
*** TODO Add a tool that changes the class of the cell to TunnelCell, and name the cell if possible
* Test Editor
** recording
** adding assertions
** saving / loading
* Scenario
** Write a great, funny, complicated, hard, intriguing GAME !!!!
* General
** TODO Use the gosu lib from the system if it exists (installed through gem?)
** TODO Build an installer for shoes app ?
** TODO Distribute as a gem ?
** TODO inline help
* Misc
** TODO [#C] Write documentation
*** TODO Puzzle syntax
*** TODO Story syntax
*** TODO Adventure files
*** TODO Document caveats, issues, problems, etc...
** TODO Have rake be happier with passing arguments to play (relative path to the adventure file ?)
** TODO Have rake run the editor => Not possible at the moment (Baaaad shoes)
** TODO Improve Logging (how to log into rake tests ?)
** TODO Mode emacs pour creer un nouveau fichier en me demandant le nom, et la description, et qui ajoute le nom
** , le bandeau, et la declaration de la classe (je suis un feignasse)
** test coverage tools ?
** TODO Blog about it !
